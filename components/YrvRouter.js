/* demo/components/YrvRouter.svelte generated by Svelte v3.29.7 */
import {
	SvelteComponent,
	check_outros,
	create_component,
	destroy_component,
	destroy_each,
	detach,
	group_outros,
	init,
	insert,
	mount_component,
	noop,
	safe_not_equal,
	space,
	text,
	transition_in,
	transition_out
} from "../web_modules/svelte/internal.js";

import { YrvRouter, YrvRoute, Routes } from "../router.js";
import { Welcome } from "../views/index.js";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[0] = list[i].path;
	child_ctx[1] = list[i].component;
	return child_ctx;
}

// (7:4) {#each Routes as { path, component }}
function create_each_block(ctx) {
	let yrvroute;
	let current;

	yrvroute = new YrvRoute({
			props: {
				exact: true,
				path: /*path*/ ctx[0],
				component: /*component*/ ctx[1]
			}
		});

	return {
		c() {
			create_component(yrvroute.$$.fragment);
		},
		m(target, anchor) {
			mount_component(yrvroute, target, anchor);
			current = true;
		},
		p: noop,
		i(local) {
			if (current) return;
			transition_in(yrvroute.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(yrvroute.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(yrvroute, detaching);
		}
	};
}

// (10:4) <YrvRoute fallback>
function create_default_slot_1(ctx) {
	let t;

	return {
		c() {
			t = text("Not found");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (5:0) <YrvRouter>
function create_default_slot(ctx) {
	let yrvroute0;
	let t0;
	let t1;
	let yrvroute1;
	let current;

	yrvroute0 = new YrvRoute({
			props: { exact: true, component: Welcome }
		});

	let each_value = Routes;
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	yrvroute1 = new YrvRoute({
			props: {
				fallback: true,
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(yrvroute0.$$.fragment);
			t0 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t1 = space();
			create_component(yrvroute1.$$.fragment);
		},
		m(target, anchor) {
			mount_component(yrvroute0, target, anchor);
			insert(target, t0, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, t1, anchor);
			mount_component(yrvroute1, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (dirty & /*Routes*/ 0) {
				each_value = Routes;
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(t1.parentNode, t1);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}

			const yrvroute1_changes = {};

			if (dirty & /*$$scope*/ 16) {
				yrvroute1_changes.$$scope = { dirty, ctx };
			}

			yrvroute1.$set(yrvroute1_changes);
		},
		i(local) {
			if (current) return;
			transition_in(yrvroute0.$$.fragment, local);

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			transition_in(yrvroute1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(yrvroute0.$$.fragment, local);
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			transition_out(yrvroute1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(yrvroute0, detaching);
			if (detaching) detach(t0);
			destroy_each(each_blocks, detaching);
			if (detaching) detach(t1);
			destroy_component(yrvroute1, detaching);
		}
	};
}

function create_fragment(ctx) {
	let yrvrouter;
	let current;

	yrvrouter = new YrvRouter({
			props: {
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(yrvrouter.$$.fragment);
		},
		m(target, anchor) {
			mount_component(yrvrouter, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const yrvrouter_changes = {};

			if (dirty & /*$$scope*/ 16) {
				yrvrouter_changes.$$scope = { dirty, ctx };
			}

			yrvrouter.$set(yrvrouter_changes);
		},
		i(local) {
			if (current) return;
			transition_in(yrvrouter.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(yrvrouter.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(yrvrouter, detaching);
		}
	};
}

class YrvRouter_1 extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, null, create_fragment, safe_not_equal, {});
	}
}

export default YrvRouter_1;