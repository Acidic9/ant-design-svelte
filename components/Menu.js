import './Menu.css.proxy.js';
/* demo/components/Menu.svelte generated by Svelte v3.30.1 */
import {
	SvelteComponent,
	append,
	attr,
	check_outros,
	create_component,
	destroy_component,
	destroy_each,
	detach,
	element,
	empty,
	group_outros,
	init,
	insert,
	mount_component,
	noop,
	safe_not_equal,
	space,
	text,
	transition_in,
	transition_out
} from "../web_modules/svelte/internal.js";

import { AntdSvelte } from "../index.js";
import { navigateTo } from "../web_modules/yrv.js";
import { Routes, ShowcaseStatus } from "../router.js";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[4] = list[i].path;
	child_ctx[5] = list[i].title;
	child_ctx[6] = list[i].component;
	child_ctx[7] = list[i].status;
	return child_ctx;
}

// (36:12) {#if status != ShowcaseStatus.STABLE}
function create_if_block(ctx) {
	let tag;
	let current;

	tag = new /*Tag*/ ctx[2]({
			props: {
				style: "margin-left: 8px;",
				$$slots: { default: [create_default_slot_2] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(tag.$$.fragment);
		},
		m(target, anchor) {
			mount_component(tag, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const tag_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				tag_changes.$$scope = { dirty, ctx };
			}

			tag.$set(tag_changes);
		},
		i(local) {
			if (current) return;
			transition_in(tag.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(tag.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(tag, detaching);
		}
	};
}

// (37:16) <Tag style="margin-left: 8px;">
function create_default_slot_2(ctx) {
	let t_value = /*status*/ ctx[7] + "";
	let t;

	return {
		c() {
			t = text(t_value);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (30:8) <MenuItem           style="padding: 0 35px;"           {component}            onClick={() => navigateTo(path)}         >
function create_default_slot_1(ctx) {
	let a;
	let t0_value = /*title*/ ctx[5] + "";
	let t0;
	let a_href_value;
	let t1;
	let t2;
	let current;
	let if_block = /*status*/ ctx[7] != ShowcaseStatus.STABLE && create_if_block(ctx);

	return {
		c() {
			a = element("a");
			t0 = text(t0_value);
			t1 = space();
			if (if_block) if_block.c();
			t2 = space();
			attr(a, "href", a_href_value = "#" + /*path*/ ctx[4]);
		},
		m(target, anchor) {
			insert(target, a, anchor);
			append(a, t0);
			insert(target, t1, anchor);
			if (if_block) if_block.m(target, anchor);
			insert(target, t2, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (/*status*/ ctx[7] != ShowcaseStatus.STABLE) if_block.p(ctx, dirty);
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(a);
			if (detaching) detach(t1);
			if (if_block) if_block.d(detaching);
			if (detaching) detach(t2);
		}
	};
}

// (29:4) {#each Routes as { path, title, component, status }}
function create_each_block(ctx) {
	let menuitem;
	let current;

	function func() {
		return /*func*/ ctx[3](/*path*/ ctx[4]);
	}

	menuitem = new /*MenuItem*/ ctx[1]({
			props: {
				style: "padding: 0 35px;",
				component: /*component*/ ctx[6],
				onClick: func,
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(menuitem.$$.fragment);
		},
		m(target, anchor) {
			mount_component(menuitem, target, anchor);
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			const menuitem_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				menuitem_changes.$$scope = { dirty, ctx };
			}

			menuitem.$set(menuitem_changes);
		},
		i(local) {
			if (current) return;
			transition_in(menuitem.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(menuitem.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(menuitem, detaching);
		}
	};
}

// (28:0) <Menu className={"full-height-menu"}>
function create_default_slot(ctx) {
	let each_1_anchor;
	let current;
	let each_value = Routes;
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	return {
		c() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (dirty & /*Routes, navigateTo, ShowcaseStatus*/ 0) {
				each_value = Routes;
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach(each_1_anchor);
		}
	};
}

function create_fragment(ctx) {
	let menu;
	let current;

	menu = new /*Menu*/ ctx[0]({
			props: {
				className: "full-height-menu",
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(menu.$$.fragment);
		},
		m(target, anchor) {
			mount_component(menu, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const menu_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				menu_changes.$$scope = { dirty, ctx };
			}

			menu.$set(menu_changes);
		},
		i(local) {
			if (current) return;
			transition_in(menu.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(menu.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(menu, detaching);
		}
	};
}

function instance($$self) {
	const { Menu, MenuItem, Tag } = AntdSvelte;
	const func = path => navigateTo(path);
	return [Menu, MenuItem, Tag, func];
}

class Menu_1 extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Menu_1;