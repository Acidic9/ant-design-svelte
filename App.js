import './App.css.proxy.js';
/* demo/App.svelte generated by Svelte v3.31.0 */
import {
	SvelteComponent,
	append,
	attr,
	create_component,
	destroy_component,
	detach,
	element,
	init,
	insert,
	mount_component,
	safe_not_equal,
	space,
	text,
	transition_in,
	transition_out
} from "./web_modules/svelte/internal.js";

import Router from "./components/YrvRouter.js";
import DemoMenu from "./components/Menu.js";
import { AntdSvelte } from "./index.js";

function create_default_slot_8(ctx) {
	let t;

	return {
		c() {
			t = text("Unofficial");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (76:8) <Header class="demo-header">
function create_default_slot_7(ctx) {
	let h1;
	let img;
	let img_src_value;
	let t0;
	let span;
	let t2;
	let tag;
	let current;

	tag = new /*Tag*/ ctx[6]({
			props: {
				color: "#FF4D4F",
				style: "margin-left: 8px;",
				$$slots: { default: [create_default_slot_8] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			h1 = element("h1");
			img = element("img");
			t0 = space();
			span = element("span");
			span.textContent = "Ant Design Svelte";
			t2 = space();
			create_component(tag.$$.fragment);
			attr(img, "alt", "logo");
			if (img.src !== (img_src_value = "assets/logo.png")) attr(img, "src", img_src_value);
			attr(img, "class", "demo-logo svelte-jgntho");
		},
		m(target, anchor) {
			insert(target, h1, anchor);
			append(h1, img);
			append(h1, t0);
			append(h1, span);
			append(h1, t2);
			mount_component(tag, h1, null);
			current = true;
		},
		p(ctx, dirty) {
			const tag_changes = {};

			if (dirty & /*$$scope*/ 128) {
				tag_changes.$$scope = { dirty, ctx };
			}

			tag.$set(tag_changes);
		},
		i(local) {
			if (current) return;
			transition_in(tag.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(tag.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(h1);
			destroy_component(tag);
		}
	};
}

// (86:20) <Sider style="padding: 8px 0; background: #fff;">
function create_default_slot_6(ctx) {
	let demomenu;
	let current;
	demomenu = new DemoMenu({});

	return {
		c() {
			create_component(demomenu.$$.fragment);
		},
		m(target, anchor) {
			mount_component(demomenu, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(demomenu.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(demomenu.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(demomenu, detaching);
		}
	};
}

// (85:16) <Col xs={0} sm={0} md={6} xl={5} xxl={4}>
function create_default_slot_5(ctx) {
	let sider;
	let current;

	sider = new /*Sider*/ ctx[4]({
			props: {
				style: "padding: 8px 0; background: #fff;",
				$$slots: { default: [create_default_slot_6] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(sider.$$.fragment);
		},
		m(target, anchor) {
			mount_component(sider, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const sider_changes = {};

			if (dirty & /*$$scope*/ 128) {
				sider_changes.$$scope = { dirty, ctx };
			}

			sider.$set(sider_changes);
		},
		i(local) {
			if (current) return;
			transition_in(sider.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(sider.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(sider, detaching);
		}
	};
}

// (92:24) <Content>
function create_default_slot_4(ctx) {
	let router;
	let current;
	router = new Router({});

	return {
		c() {
			create_component(router.$$.fragment);
		},
		m(target, anchor) {
			mount_component(router, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(router.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(router.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(router, detaching);
		}
	};
}

// (90:16) <Col xs={24} sm={24} md={18} xl={19} xxl={20}>
function create_default_slot_3(ctx) {
	let div;
	let content;
	let current;

	content = new /*Content*/ ctx[1]({
			props: {
				$$slots: { default: [create_default_slot_4] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			div = element("div");
			create_component(content.$$.fragment);
			attr(div, "class", "demo-content svelte-jgntho");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			mount_component(content, div, null);
			current = true;
		},
		p(ctx, dirty) {
			const content_changes = {};

			if (dirty & /*$$scope*/ 128) {
				content_changes.$$scope = { dirty, ctx };
			}

			content.$set(content_changes);
		},
		i(local) {
			if (current) return;
			transition_in(content.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(content.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(content);
		}
	};
}

// (84:12) <Row style="width: 100%;">
function create_default_slot_2(ctx) {
	let col0;
	let t;
	let col1;
	let current;

	col0 = new /*Col*/ ctx[3]({
			props: {
				xs: 0,
				sm: 0,
				md: 6,
				xl: 5,
				xxl: 4,
				$$slots: { default: [create_default_slot_5] },
				$$scope: { ctx }
			}
		});

	col1 = new /*Col*/ ctx[3]({
			props: {
				xs: 24,
				sm: 24,
				md: 18,
				xl: 19,
				xxl: 20,
				$$slots: { default: [create_default_slot_3] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(col0.$$.fragment);
			t = space();
			create_component(col1.$$.fragment);
		},
		m(target, anchor) {
			mount_component(col0, target, anchor);
			insert(target, t, anchor);
			mount_component(col1, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const col0_changes = {};

			if (dirty & /*$$scope*/ 128) {
				col0_changes.$$scope = { dirty, ctx };
			}

			col0.$set(col0_changes);
			const col1_changes = {};

			if (dirty & /*$$scope*/ 128) {
				col1_changes.$$scope = { dirty, ctx };
			}

			col1.$set(col1_changes);
		},
		i(local) {
			if (current) return;
			transition_in(col0.$$.fragment, local);
			transition_in(col1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(col0.$$.fragment, local);
			transition_out(col1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(col0, detaching);
			if (detaching) detach(t);
			destroy_component(col1, detaching);
		}
	};
}

// (83:8) <Layout hasSider={true} style="position: relative; min-height: calc(100vh - 64px); max-height: calc(100vh - 75px);">
function create_default_slot_1(ctx) {
	let row;
	let current;

	row = new /*Row*/ ctx[2]({
			props: {
				style: "width: 100%;",
				$$slots: { default: [create_default_slot_2] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(row.$$.fragment);
		},
		m(target, anchor) {
			mount_component(row, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const row_changes = {};

			if (dirty & /*$$scope*/ 128) {
				row_changes.$$scope = { dirty, ctx };
			}

			row.$set(row_changes);
		},
		i(local) {
			if (current) return;
			transition_in(row.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(row.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(row, detaching);
		}
	};
}

// (75:4) <Layout>
function create_default_slot(ctx) {
	let header;
	let t;
	let layout;
	let current;

	header = new /*Header*/ ctx[5]({
			props: {
				class: "demo-header",
				$$slots: { default: [create_default_slot_7] },
				$$scope: { ctx }
			}
		});

	layout = new /*Layout*/ ctx[0]({
			props: {
				hasSider: true,
				style: "position: relative; min-height: calc(100vh - 64px); max-height: calc(100vh - 75px);",
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(header.$$.fragment);
			t = space();
			create_component(layout.$$.fragment);
		},
		m(target, anchor) {
			mount_component(header, target, anchor);
			insert(target, t, anchor);
			mount_component(layout, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const header_changes = {};

			if (dirty & /*$$scope*/ 128) {
				header_changes.$$scope = { dirty, ctx };
			}

			header.$set(header_changes);
			const layout_changes = {};

			if (dirty & /*$$scope*/ 128) {
				layout_changes.$$scope = { dirty, ctx };
			}

			layout.$set(layout_changes);
		},
		i(local) {
			if (current) return;
			transition_in(header.$$.fragment, local);
			transition_in(layout.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(header.$$.fragment, local);
			transition_out(layout.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(header, detaching);
			if (detaching) detach(t);
			destroy_component(layout, detaching);
		}
	};
}

function create_fragment(ctx) {
	let div;
	let layout;
	let current;

	layout = new /*Layout*/ ctx[0]({
			props: {
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			div = element("div");
			create_component(layout.$$.fragment);
			attr(div, "class", "main-layout svelte-jgntho");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			mount_component(layout, div, null);
			current = true;
		},
		p(ctx, [dirty]) {
			const layout_changes = {};

			if (dirty & /*$$scope*/ 128) {
				layout_changes.$$scope = { dirty, ctx };
			}

			layout.$set(layout_changes);
		},
		i(local) {
			if (current) return;
			transition_in(layout.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(layout.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(layout);
		}
	};
}

function instance($$self) {
	const { Layout, Content, Row, Col, Sider, Header, Tag } = AntdSvelte;
	return [Layout, Content, Row, Col, Sider, Header, Tag];
}

class App extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default App;