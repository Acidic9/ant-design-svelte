import './Row.css.proxy.js';
/* src/components/grid/Row.svelte generated by Svelte v3.29.7 */
import {
	SvelteComponent,
	attr,
	create_slot,
	detach,
	element,
	init,
	insert,
	null_to_empty,
	safe_not_equal,
	transition_in,
	transition_out,
	update_slot
} from "../../../web_modules/svelte/internal.js";

import { setContext } from "../../../web_modules/svelte.js";

function create_fragment(ctx) {
	let div;
	let div_class_value;
	let current;
	const default_slot_template = /*#slots*/ ctx[5].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[4], null);

	return {
		c() {
			div = element("div");
			if (default_slot) default_slot.c();
			attr(div, "class", div_class_value = "" + (null_to_empty(/*classes*/ ctx[0]) + " svelte-65y6bg"));
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 16) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[4], dirty, null, null);
				}
			}

			if (!current || dirty & /*classes*/ 1 && div_class_value !== (div_class_value = "" + (null_to_empty(/*classes*/ ctx[0]) + " svelte-65y6bg"))) {
				attr(div, "class", div_class_value);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let { justify = "start" } = $$props;
	let { align = "top" } = $$props;
	let { gutter = 0 } = $$props;
	setContext("gutter", gutter);

	$$self.$$set = $$props => {
		if ("justify" in $$props) $$invalidate(1, justify = $$props.justify);
		if ("align" in $$props) $$invalidate(2, align = $$props.align);
		if ("gutter" in $$props) $$invalidate(3, gutter = $$props.gutter);
		if ("$$scope" in $$props) $$invalidate(4, $$scope = $$props.$$scope);
	};

	let classes;

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*justify, align*/ 6) {
			$: $$invalidate(0, classes = [
				"ant-row",
				justify ? `ant-row-${justify}` : false,
				align ? `ant-row-${align}` : false
			].filter(item => item).join(" "));
		}
	};

	return [classes, justify, align, gutter, $$scope, slots];
}

class Row extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { justify: 1, align: 2, gutter: 3 });
	}
}

export default Row;