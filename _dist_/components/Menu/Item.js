/* src/components/Menu/Item.svelte generated by Svelte v3.30.1 */
import {
	SvelteComponent,
	attr,
	binding_callbacks,
	check_outros,
	component_subscribe,
	create_slot,
	detach,
	element,
	group_outros,
	init,
	insert,
	listen,
	noop,
	run_all,
	safe_not_equal,
	self,
	set_data,
	text,
	toggle_class,
	transition_in,
	transition_out,
	update_slot
} from "../../../web_modules/svelte/internal.js";

import { getContext } from "../../../web_modules/svelte.js";
import { context } from "./context.js";

function create_else_block(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[13].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[12], null);

	return {
		c() {
			if (default_slot) default_slot.c();
		},
		m(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 4096) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[12], dirty, null, null);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};
}

// (35:2) {#if title}
function create_if_block(ctx) {
	let t;

	return {
		c() {
			t = text(/*title*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 2) set_data(t, /*title*/ ctx[1]);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

function create_fragment(ctx) {
	let li;
	let current_block_type_index;
	let if_block;
	let current;
	let mounted;
	let dispose;
	const if_block_creators = [create_if_block, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*title*/ ctx[1]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx, -1);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			li = element("li");
			if_block.c();
			attr(li, "class", "ant-menu-item");
			attr(li, "role", "menuitem");
			attr(li, "style", /*style*/ ctx[2]);
			toggle_class(li, "ant-menu-item-selected", /*$selectedKey*/ ctx[6] === /*key*/ ctx[4]);
			toggle_class(li, "ant-menu-item-active", /*active*/ ctx[0]);
			toggle_class(li, "ant-menu-item-disabled", /*disabled*/ ctx[3]);
			toggle_class(li, "ant-menu-item-only-child", false);
		},
		m(target, anchor) {
			insert(target, li, anchor);
			if_blocks[current_block_type_index].m(li, null);
			/*li_binding*/ ctx[14](li);
			current = true;

			if (!mounted) {
				dispose = [
					listen(li, "mouseenter", self(/*handleActive*/ ctx[8])),
					listen(li, "mouseleave", self(/*handleActive*/ ctx[8])),
					listen(li, "click", /*handleSelect*/ ctx[9])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(li, null);
			}

			if (!current || dirty & /*style*/ 4) {
				attr(li, "style", /*style*/ ctx[2]);
			}

			if (dirty & /*$selectedKey, key*/ 80) {
				toggle_class(li, "ant-menu-item-selected", /*$selectedKey*/ ctx[6] === /*key*/ ctx[4]);
			}

			if (dirty & /*active*/ 1) {
				toggle_class(li, "ant-menu-item-active", /*active*/ ctx[0]);
			}

			if (dirty & /*disabled*/ 8) {
				toggle_class(li, "ant-menu-item-disabled", /*disabled*/ ctx[3]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(li);
			if_blocks[current_block_type_index].d();
			/*li_binding*/ ctx[14](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $selectedKey;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { title = undefined } = $$props;
	let { style = undefined } = $$props;
	let { active = false } = $$props;
	let { disabled = false } = $$props;
	let { key = Symbol() } = $$props;
	let { onClick = undefined } = $$props;
	let { sub = undefined } = $$props;
	const { selectedKey, subSelected } = getContext(context);
	component_subscribe($$self, selectedKey, value => $$invalidate(6, $selectedKey = value));

	function handleActive() {
		$$invalidate(0, active = !active);
	}

	function handleSelect() {
		if (onClick) onClick();
		selectedKey.set(key);
		subSelected.set(sub);
	}

	let el;

	function li_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			el = $$value;
			$$invalidate(5, el);
		});
	}

	$$self.$$set = $$props => {
		if ("title" in $$props) $$invalidate(1, title = $$props.title);
		if ("style" in $$props) $$invalidate(2, style = $$props.style);
		if ("active" in $$props) $$invalidate(0, active = $$props.active);
		if ("disabled" in $$props) $$invalidate(3, disabled = $$props.disabled);
		if ("key" in $$props) $$invalidate(4, key = $$props.key);
		if ("onClick" in $$props) $$invalidate(10, onClick = $$props.onClick);
		if ("sub" in $$props) $$invalidate(11, sub = $$props.sub);
		if ("$$scope" in $$props) $$invalidate(12, $$scope = $$props.$$scope);
	};

	return [
		active,
		title,
		style,
		disabled,
		key,
		el,
		$selectedKey,
		selectedKey,
		handleActive,
		handleSelect,
		onClick,
		sub,
		$$scope,
		slots,
		li_binding
	];
}

class Item extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			title: 1,
			style: 2,
			active: 0,
			disabled: 3,
			key: 4,
			onClick: 10,
			sub: 11
		});
	}
}

export default Item;