/* src/components/Tag/Tag.svelte generated by Svelte v3.29.7 */
import {
	SvelteComponent,
	append,
	attr,
	create_slot,
	detach,
	element,
	init,
	insert,
	safe_not_equal,
	space,
	transition_in,
	transition_out,
	update_slot
} from "../../../web_modules/svelte/internal.js";

function create_if_block(ctx) {
	let span;

	return {
		c() {
			span = element("span");
		},
		m(target, anchor) {
			insert(target, span, anchor);
		},
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

function create_fragment(ctx) {
	let span;
	let t;
	let current;
	const default_slot_template = /*#slots*/ ctx[7].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[6], null);
	let if_block = /*closable*/ ctx[0] && create_if_block(ctx);

	return {
		c() {
			span = element("span");
			if (default_slot) default_slot.c();
			t = space();
			if (if_block) if_block.c();
			attr(span, "class", /*classes*/ ctx[1]);
			attr(span, "style", /*computedStyles*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, span, anchor);

			if (default_slot) {
				default_slot.m(span, null);
			}

			append(span, t);
			if (if_block) if_block.m(span, null);
			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 64) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[6], dirty, null, null);
				}
			}

			if (/*closable*/ ctx[0]) {
				if (if_block) {
					
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(span, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (!current || dirty & /*classes*/ 2) {
				attr(span, "class", /*classes*/ ctx[1]);
			}

			if (!current || dirty & /*computedStyles*/ 4) {
				attr(span, "style", /*computedStyles*/ ctx[2]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(span);
			if (default_slot) default_slot.d(detaching);
			if (if_block) if_block.d();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let { color = undefined } = $$props;
	let { closable = false } = $$props;
	let { visible = true } = $$props;
	let { style = undefined } = $$props;

	$$self.$$set = $$props => {
		if ("color" in $$props) $$invalidate(3, color = $$props.color);
		if ("closable" in $$props) $$invalidate(0, closable = $$props.closable);
		if ("visible" in $$props) $$invalidate(4, visible = $$props.visible);
		if ("style" in $$props) $$invalidate(5, style = $$props.style);
		if ("$$scope" in $$props) $$invalidate(6, $$scope = $$props.$$scope);
	};

	let classes;
	let computedStyles;

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*color, visible*/ 24) {
			$: $$invalidate(1, classes = [
				"ant-tag",
				color ? "ant-tag-has-color" : false,
				visible ? false : "ant-tag-hidden"
			].filter(item => item).join(" "));
		}

		if ($$self.$$.dirty & /*style, color*/ 40) {
			$: $$invalidate(2, computedStyles = [style, color ? `background: ${color};` : false].filter(item => item).join(" "));
		}
	};

	return [closable, classes, computedStyles, color, visible, style, $$scope, slots];
}

class Tag extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			color: 3,
			closable: 0,
			visible: 4,
			style: 5
		});
	}
}

export default Tag;