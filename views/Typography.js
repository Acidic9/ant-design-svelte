/* demo/views/Typography.svx generated by Svelte v3.30.1 */
import {
	SvelteComponent,
	append,
	create_component,
	destroy_component,
	detach,
	element,
	init,
	insert,
	mount_component,
	noop,
	safe_not_equal,
	set_style,
	space,
	text,
	transition_in,
	transition_out
} from "../web_modules/svelte/internal.js";

import ReactWrapper from "../components/ReactWrapper.js";
import { Titles } from "../antd/Typography.js";
import { AntdSvelte } from "../index.js";

function create_default_slot_64(ctx) {
	let t;

	return {
		c() {
			t = text("h1. Ant Design");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (18:20) <Title level={2}>
function create_default_slot_63(ctx) {
	let t;

	return {
		c() {
			t = text("h2. Ant Design");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (19:20) <Title level={3}>
function create_default_slot_62(ctx) {
	let t;

	return {
		c() {
			t = text("h3. Ant Design");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (20:20) <Title level={4}>
function create_default_slot_61(ctx) {
	let t;

	return {
		c() {
			t = text("h4. Ant Design");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (21:20) <Title level={5}>
function create_default_slot_60(ctx) {
	let t;

	return {
		c() {
			t = text("h5. Ant Design");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (14:12) <Col span={12}>
function create_default_slot_59(ctx) {
	let h3;
	let t1;
	let div;
	let title0;
	let t2;
	let title1;
	let t3;
	let title2;
	let t4;
	let title3;
	let t5;
	let title4;
	let current;

	title0 = new /*Title*/ ctx[2]({
			props: {
				$$slots: { default: [create_default_slot_64] },
				$$scope: { ctx }
			}
		});

	title1 = new /*Title*/ ctx[2]({
			props: {
				level: 2,
				$$slots: { default: [create_default_slot_63] },
				$$scope: { ctx }
			}
		});

	title2 = new /*Title*/ ctx[2]({
			props: {
				level: 3,
				$$slots: { default: [create_default_slot_62] },
				$$scope: { ctx }
			}
		});

	title3 = new /*Title*/ ctx[2]({
			props: {
				level: 4,
				$$slots: { default: [create_default_slot_61] },
				$$scope: { ctx }
			}
		});

	title4 = new /*Title*/ ctx[2]({
			props: {
				level: 5,
				$$slots: { default: [create_default_slot_60] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			h3 = element("h3");
			h3.textContent = "Svelte";
			t1 = space();
			div = element("div");
			create_component(title0.$$.fragment);
			t2 = space();
			create_component(title1.$$.fragment);
			t3 = space();
			create_component(title2.$$.fragment);
			t4 = space();
			create_component(title3.$$.fragment);
			t5 = space();
			create_component(title4.$$.fragment);
		},
		m(target, anchor) {
			insert(target, h3, anchor);
			insert(target, t1, anchor);
			insert(target, div, anchor);
			mount_component(title0, div, null);
			append(div, t2);
			mount_component(title1, div, null);
			append(div, t3);
			mount_component(title2, div, null);
			append(div, t4);
			mount_component(title3, div, null);
			append(div, t5);
			mount_component(title4, div, null);
			current = true;
		},
		p(ctx, dirty) {
			const title0_changes = {};

			if (dirty & /*$$scope*/ 8) {
				title0_changes.$$scope = { dirty, ctx };
			}

			title0.$set(title0_changes);
			const title1_changes = {};

			if (dirty & /*$$scope*/ 8) {
				title1_changes.$$scope = { dirty, ctx };
			}

			title1.$set(title1_changes);
			const title2_changes = {};

			if (dirty & /*$$scope*/ 8) {
				title2_changes.$$scope = { dirty, ctx };
			}

			title2.$set(title2_changes);
			const title3_changes = {};

			if (dirty & /*$$scope*/ 8) {
				title3_changes.$$scope = { dirty, ctx };
			}

			title3.$set(title3_changes);
			const title4_changes = {};

			if (dirty & /*$$scope*/ 8) {
				title4_changes.$$scope = { dirty, ctx };
			}

			title4.$set(title4_changes);
		},
		i(local) {
			if (current) return;
			transition_in(title0.$$.fragment, local);
			transition_in(title1.$$.fragment, local);
			transition_in(title2.$$.fragment, local);
			transition_in(title3.$$.fragment, local);
			transition_in(title4.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(title0.$$.fragment, local);
			transition_out(title1.$$.fragment, local);
			transition_out(title2.$$.fragment, local);
			transition_out(title3.$$.fragment, local);
			transition_out(title4.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(h3);
			if (detaching) detach(t1);
			if (detaching) detach(div);
			destroy_component(title0);
			destroy_component(title1);
			destroy_component(title2);
			destroy_component(title3);
			destroy_component(title4);
		}
	};
}

// (24:12) <Col span={12}>
function create_default_slot_58(ctx) {
	let h3;
	let t1;
	let reactwrapper;
	let current;
	reactwrapper = new ReactWrapper({ props: { component: Titles } });

	return {
		c() {
			h3 = element("h3");
			h3.textContent = "React";
			t1 = space();
			create_component(reactwrapper.$$.fragment);
		},
		m(target, anchor) {
			insert(target, h3, anchor);
			insert(target, t1, anchor);
			mount_component(reactwrapper, target, anchor);
			current = true;
		},
		p: noop,
		i(local) {
			if (current) return;
			transition_in(reactwrapper.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(reactwrapper.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(h3);
			if (detaching) detach(t1);
			destroy_component(reactwrapper, detaching);
		}
	};
}

// (13:8) <Row style="width: 100%;">
function create_default_slot_57(ctx) {
	let col0;
	let t;
	let col1;
	let current;

	col0 = new /*Col*/ ctx[1]({
			props: {
				span: 12,
				$$slots: { default: [create_default_slot_59] },
				$$scope: { ctx }
			}
		});

	col1 = new /*Col*/ ctx[1]({
			props: {
				span: 12,
				$$slots: { default: [create_default_slot_58] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(col0.$$.fragment);
			t = space();
			create_component(col1.$$.fragment);
		},
		m(target, anchor) {
			mount_component(col0, target, anchor);
			insert(target, t, anchor);
			mount_component(col1, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const col0_changes = {};

			if (dirty & /*$$scope*/ 8) {
				col0_changes.$$scope = { dirty, ctx };
			}

			col0.$set(col0_changes);
			const col1_changes = {};

			if (dirty & /*$$scope*/ 8) {
				col1_changes.$$scope = { dirty, ctx };
			}

			col1.$set(col1_changes);
		},
		i(local) {
			if (current) return;
			transition_in(col0.$$.fragment, local);
			transition_in(col1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(col0.$$.fragment, local);
			transition_out(col1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(col0, detaching);
			if (detaching) detach(t);
			destroy_component(col1, detaching);
		}
	};
}

// (35:20) <Title>
function create_default_slot_56(ctx) {
	let t;

	return {
		c() {
			t = text("h1. Ant Design");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (36:20) <Title level={2}>
function create_default_slot_55(ctx) {
	let t;

	return {
		c() {
			t = text("h2. Ant Design");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (37:20) <Title level={3}>
function create_default_slot_54(ctx) {
	let t;

	return {
		c() {
			t = text("h3. Ant Design");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (38:20) <Title level={4}>
function create_default_slot_53(ctx) {
	let t;

	return {
		c() {
			t = text("h4. Ant Design");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (39:20) <Title level={5}>
function create_default_slot_52(ctx) {
	let t;

	return {
		c() {
			t = text("h5. Ant Design");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (32:12) <Col span={12}>
function create_default_slot_51(ctx) {
	let h3;
	let t1;
	let div;
	let title0;
	let t2;
	let title1;
	let t3;
	let title2;
	let t4;
	let title3;
	let t5;
	let title4;
	let current;

	title0 = new /*Title*/ ctx[2]({
			props: {
				$$slots: { default: [create_default_slot_56] },
				$$scope: { ctx }
			}
		});

	title1 = new /*Title*/ ctx[2]({
			props: {
				level: 2,
				$$slots: { default: [create_default_slot_55] },
				$$scope: { ctx }
			}
		});

	title2 = new /*Title*/ ctx[2]({
			props: {
				level: 3,
				$$slots: { default: [create_default_slot_54] },
				$$scope: { ctx }
			}
		});

	title3 = new /*Title*/ ctx[2]({
			props: {
				level: 4,
				$$slots: { default: [create_default_slot_53] },
				$$scope: { ctx }
			}
		});

	title4 = new /*Title*/ ctx[2]({
			props: {
				level: 5,
				$$slots: { default: [create_default_slot_52] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			h3 = element("h3");
			h3.textContent = "Svelte";
			t1 = space();
			div = element("div");
			create_component(title0.$$.fragment);
			t2 = space();
			create_component(title1.$$.fragment);
			t3 = space();
			create_component(title2.$$.fragment);
			t4 = space();
			create_component(title3.$$.fragment);
			t5 = space();
			create_component(title4.$$.fragment);
		},
		m(target, anchor) {
			insert(target, h3, anchor);
			insert(target, t1, anchor);
			insert(target, div, anchor);
			mount_component(title0, div, null);
			append(div, t2);
			mount_component(title1, div, null);
			append(div, t3);
			mount_component(title2, div, null);
			append(div, t4);
			mount_component(title3, div, null);
			append(div, t5);
			mount_component(title4, div, null);
			current = true;
		},
		p(ctx, dirty) {
			const title0_changes = {};

			if (dirty & /*$$scope*/ 8) {
				title0_changes.$$scope = { dirty, ctx };
			}

			title0.$set(title0_changes);
			const title1_changes = {};

			if (dirty & /*$$scope*/ 8) {
				title1_changes.$$scope = { dirty, ctx };
			}

			title1.$set(title1_changes);
			const title2_changes = {};

			if (dirty & /*$$scope*/ 8) {
				title2_changes.$$scope = { dirty, ctx };
			}

			title2.$set(title2_changes);
			const title3_changes = {};

			if (dirty & /*$$scope*/ 8) {
				title3_changes.$$scope = { dirty, ctx };
			}

			title3.$set(title3_changes);
			const title4_changes = {};

			if (dirty & /*$$scope*/ 8) {
				title4_changes.$$scope = { dirty, ctx };
			}

			title4.$set(title4_changes);
		},
		i(local) {
			if (current) return;
			transition_in(title0.$$.fragment, local);
			transition_in(title1.$$.fragment, local);
			transition_in(title2.$$.fragment, local);
			transition_in(title3.$$.fragment, local);
			transition_in(title4.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(title0.$$.fragment, local);
			transition_out(title1.$$.fragment, local);
			transition_out(title2.$$.fragment, local);
			transition_out(title3.$$.fragment, local);
			transition_out(title4.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(h3);
			if (detaching) detach(t1);
			if (detaching) detach(div);
			destroy_component(title0);
			destroy_component(title1);
			destroy_component(title2);
			destroy_component(title3);
			destroy_component(title4);
		}
	};
}

// (42:12) <Col span={12}>
function create_default_slot_50(ctx) {
	let h3;
	let t1;
	let reactwrapper;
	let current;
	reactwrapper = new ReactWrapper({ props: { component: Titles } });

	return {
		c() {
			h3 = element("h3");
			h3.textContent = "React";
			t1 = space();
			create_component(reactwrapper.$$.fragment);
		},
		m(target, anchor) {
			insert(target, h3, anchor);
			insert(target, t1, anchor);
			mount_component(reactwrapper, target, anchor);
			current = true;
		},
		p: noop,
		i(local) {
			if (current) return;
			transition_in(reactwrapper.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(reactwrapper.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(h3);
			if (detaching) detach(t1);
			destroy_component(reactwrapper, detaching);
		}
	};
}

// (31:8) <Row>
function create_default_slot_49(ctx) {
	let col0;
	let t;
	let col1;
	let current;

	col0 = new /*Col*/ ctx[1]({
			props: {
				span: 12,
				$$slots: { default: [create_default_slot_51] },
				$$scope: { ctx }
			}
		});

	col1 = new /*Col*/ ctx[1]({
			props: {
				span: 12,
				$$slots: { default: [create_default_slot_50] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(col0.$$.fragment);
			t = space();
			create_component(col1.$$.fragment);
		},
		m(target, anchor) {
			mount_component(col0, target, anchor);
			insert(target, t, anchor);
			mount_component(col1, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const col0_changes = {};

			if (dirty & /*$$scope*/ 8) {
				col0_changes.$$scope = { dirty, ctx };
			}

			col0.$set(col0_changes);
			const col1_changes = {};

			if (dirty & /*$$scope*/ 8) {
				col1_changes.$$scope = { dirty, ctx };
			}

			col1.$set(col1_changes);
		},
		i(local) {
			if (current) return;
			transition_in(col0.$$.fragment, local);
			transition_in(col1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(col0.$$.fragment, local);
			transition_out(col1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(col0, detaching);
			if (detaching) detach(t);
			destroy_component(col1, detaching);
		}
	};
}

// (53:20) <Title>
function create_default_slot_48(ctx) {
	let t;

	return {
		c() {
			t = text("h1. Ant Design");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (54:20) <Title level={2}>
function create_default_slot_47(ctx) {
	let t;

	return {
		c() {
			t = text("h2. Ant Design");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (55:20) <Title level={3}>
function create_default_slot_46(ctx) {
	let t;

	return {
		c() {
			t = text("h3. Ant Design");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (56:20) <Title level={4}>
function create_default_slot_45(ctx) {
	let t;

	return {
		c() {
			t = text("h4. Ant Design");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (57:20) <Title level={5}>
function create_default_slot_44(ctx) {
	let t;

	return {
		c() {
			t = text("h5. Ant Design");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (50:12) <Col span={12}>
function create_default_slot_43(ctx) {
	let h3;
	let t1;
	let div;
	let title0;
	let t2;
	let title1;
	let t3;
	let title2;
	let t4;
	let title3;
	let t5;
	let title4;
	let current;

	title0 = new /*Title*/ ctx[2]({
			props: {
				$$slots: { default: [create_default_slot_48] },
				$$scope: { ctx }
			}
		});

	title1 = new /*Title*/ ctx[2]({
			props: {
				level: 2,
				$$slots: { default: [create_default_slot_47] },
				$$scope: { ctx }
			}
		});

	title2 = new /*Title*/ ctx[2]({
			props: {
				level: 3,
				$$slots: { default: [create_default_slot_46] },
				$$scope: { ctx }
			}
		});

	title3 = new /*Title*/ ctx[2]({
			props: {
				level: 4,
				$$slots: { default: [create_default_slot_45] },
				$$scope: { ctx }
			}
		});

	title4 = new /*Title*/ ctx[2]({
			props: {
				level: 5,
				$$slots: { default: [create_default_slot_44] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			h3 = element("h3");
			h3.textContent = "Svelte";
			t1 = space();
			div = element("div");
			create_component(title0.$$.fragment);
			t2 = space();
			create_component(title1.$$.fragment);
			t3 = space();
			create_component(title2.$$.fragment);
			t4 = space();
			create_component(title3.$$.fragment);
			t5 = space();
			create_component(title4.$$.fragment);
		},
		m(target, anchor) {
			insert(target, h3, anchor);
			insert(target, t1, anchor);
			insert(target, div, anchor);
			mount_component(title0, div, null);
			append(div, t2);
			mount_component(title1, div, null);
			append(div, t3);
			mount_component(title2, div, null);
			append(div, t4);
			mount_component(title3, div, null);
			append(div, t5);
			mount_component(title4, div, null);
			current = true;
		},
		p(ctx, dirty) {
			const title0_changes = {};

			if (dirty & /*$$scope*/ 8) {
				title0_changes.$$scope = { dirty, ctx };
			}

			title0.$set(title0_changes);
			const title1_changes = {};

			if (dirty & /*$$scope*/ 8) {
				title1_changes.$$scope = { dirty, ctx };
			}

			title1.$set(title1_changes);
			const title2_changes = {};

			if (dirty & /*$$scope*/ 8) {
				title2_changes.$$scope = { dirty, ctx };
			}

			title2.$set(title2_changes);
			const title3_changes = {};

			if (dirty & /*$$scope*/ 8) {
				title3_changes.$$scope = { dirty, ctx };
			}

			title3.$set(title3_changes);
			const title4_changes = {};

			if (dirty & /*$$scope*/ 8) {
				title4_changes.$$scope = { dirty, ctx };
			}

			title4.$set(title4_changes);
		},
		i(local) {
			if (current) return;
			transition_in(title0.$$.fragment, local);
			transition_in(title1.$$.fragment, local);
			transition_in(title2.$$.fragment, local);
			transition_in(title3.$$.fragment, local);
			transition_in(title4.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(title0.$$.fragment, local);
			transition_out(title1.$$.fragment, local);
			transition_out(title2.$$.fragment, local);
			transition_out(title3.$$.fragment, local);
			transition_out(title4.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(h3);
			if (detaching) detach(t1);
			if (detaching) detach(div);
			destroy_component(title0);
			destroy_component(title1);
			destroy_component(title2);
			destroy_component(title3);
			destroy_component(title4);
		}
	};
}

// (60:12) <Col span={12}>
function create_default_slot_42(ctx) {
	let h3;
	let t1;
	let reactwrapper;
	let current;
	reactwrapper = new ReactWrapper({ props: { component: Titles } });

	return {
		c() {
			h3 = element("h3");
			h3.textContent = "React";
			t1 = space();
			create_component(reactwrapper.$$.fragment);
		},
		m(target, anchor) {
			insert(target, h3, anchor);
			insert(target, t1, anchor);
			mount_component(reactwrapper, target, anchor);
			current = true;
		},
		p: noop,
		i(local) {
			if (current) return;
			transition_in(reactwrapper.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(reactwrapper.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(h3);
			if (detaching) detach(t1);
			destroy_component(reactwrapper, detaching);
		}
	};
}

// (49:8) <Row>
function create_default_slot_41(ctx) {
	let col0;
	let t;
	let col1;
	let current;

	col0 = new /*Col*/ ctx[1]({
			props: {
				span: 12,
				$$slots: { default: [create_default_slot_43] },
				$$scope: { ctx }
			}
		});

	col1 = new /*Col*/ ctx[1]({
			props: {
				span: 12,
				$$slots: { default: [create_default_slot_42] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(col0.$$.fragment);
			t = space();
			create_component(col1.$$.fragment);
		},
		m(target, anchor) {
			mount_component(col0, target, anchor);
			insert(target, t, anchor);
			mount_component(col1, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const col0_changes = {};

			if (dirty & /*$$scope*/ 8) {
				col0_changes.$$scope = { dirty, ctx };
			}

			col0.$set(col0_changes);
			const col1_changes = {};

			if (dirty & /*$$scope*/ 8) {
				col1_changes.$$scope = { dirty, ctx };
			}

			col1.$set(col1_changes);
		},
		i(local) {
			if (current) return;
			transition_in(col0.$$.fragment, local);
			transition_in(col1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(col0.$$.fragment, local);
			transition_out(col1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(col0, detaching);
			if (detaching) detach(t);
			destroy_component(col1, detaching);
		}
	};
}

// (71:20) <Title>
function create_default_slot_40(ctx) {
	let t;

	return {
		c() {
			t = text("h1. Ant Design");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (72:20) <Title level={2}>
function create_default_slot_39(ctx) {
	let t;

	return {
		c() {
			t = text("h2. Ant Design");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (73:20) <Title level={3}>
function create_default_slot_38(ctx) {
	let t;

	return {
		c() {
			t = text("h3. Ant Design");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (74:20) <Title level={4}>
function create_default_slot_37(ctx) {
	let t;

	return {
		c() {
			t = text("h4. Ant Design");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (75:20) <Title level={5}>
function create_default_slot_36(ctx) {
	let t;

	return {
		c() {
			t = text("h5. Ant Design");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (68:12) <Col span={12}>
function create_default_slot_35(ctx) {
	let h3;
	let t1;
	let div;
	let title0;
	let t2;
	let title1;
	let t3;
	let title2;
	let t4;
	let title3;
	let t5;
	let title4;
	let current;

	title0 = new /*Title*/ ctx[2]({
			props: {
				$$slots: { default: [create_default_slot_40] },
				$$scope: { ctx }
			}
		});

	title1 = new /*Title*/ ctx[2]({
			props: {
				level: 2,
				$$slots: { default: [create_default_slot_39] },
				$$scope: { ctx }
			}
		});

	title2 = new /*Title*/ ctx[2]({
			props: {
				level: 3,
				$$slots: { default: [create_default_slot_38] },
				$$scope: { ctx }
			}
		});

	title3 = new /*Title*/ ctx[2]({
			props: {
				level: 4,
				$$slots: { default: [create_default_slot_37] },
				$$scope: { ctx }
			}
		});

	title4 = new /*Title*/ ctx[2]({
			props: {
				level: 5,
				$$slots: { default: [create_default_slot_36] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			h3 = element("h3");
			h3.textContent = "Svelte";
			t1 = space();
			div = element("div");
			create_component(title0.$$.fragment);
			t2 = space();
			create_component(title1.$$.fragment);
			t3 = space();
			create_component(title2.$$.fragment);
			t4 = space();
			create_component(title3.$$.fragment);
			t5 = space();
			create_component(title4.$$.fragment);
		},
		m(target, anchor) {
			insert(target, h3, anchor);
			insert(target, t1, anchor);
			insert(target, div, anchor);
			mount_component(title0, div, null);
			append(div, t2);
			mount_component(title1, div, null);
			append(div, t3);
			mount_component(title2, div, null);
			append(div, t4);
			mount_component(title3, div, null);
			append(div, t5);
			mount_component(title4, div, null);
			current = true;
		},
		p(ctx, dirty) {
			const title0_changes = {};

			if (dirty & /*$$scope*/ 8) {
				title0_changes.$$scope = { dirty, ctx };
			}

			title0.$set(title0_changes);
			const title1_changes = {};

			if (dirty & /*$$scope*/ 8) {
				title1_changes.$$scope = { dirty, ctx };
			}

			title1.$set(title1_changes);
			const title2_changes = {};

			if (dirty & /*$$scope*/ 8) {
				title2_changes.$$scope = { dirty, ctx };
			}

			title2.$set(title2_changes);
			const title3_changes = {};

			if (dirty & /*$$scope*/ 8) {
				title3_changes.$$scope = { dirty, ctx };
			}

			title3.$set(title3_changes);
			const title4_changes = {};

			if (dirty & /*$$scope*/ 8) {
				title4_changes.$$scope = { dirty, ctx };
			}

			title4.$set(title4_changes);
		},
		i(local) {
			if (current) return;
			transition_in(title0.$$.fragment, local);
			transition_in(title1.$$.fragment, local);
			transition_in(title2.$$.fragment, local);
			transition_in(title3.$$.fragment, local);
			transition_in(title4.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(title0.$$.fragment, local);
			transition_out(title1.$$.fragment, local);
			transition_out(title2.$$.fragment, local);
			transition_out(title3.$$.fragment, local);
			transition_out(title4.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(h3);
			if (detaching) detach(t1);
			if (detaching) detach(div);
			destroy_component(title0);
			destroy_component(title1);
			destroy_component(title2);
			destroy_component(title3);
			destroy_component(title4);
		}
	};
}

// (78:12) <Col span={12}>
function create_default_slot_34(ctx) {
	let h3;
	let t1;
	let reactwrapper;
	let current;
	reactwrapper = new ReactWrapper({ props: { component: Titles } });

	return {
		c() {
			h3 = element("h3");
			h3.textContent = "React";
			t1 = space();
			create_component(reactwrapper.$$.fragment);
		},
		m(target, anchor) {
			insert(target, h3, anchor);
			insert(target, t1, anchor);
			mount_component(reactwrapper, target, anchor);
			current = true;
		},
		p: noop,
		i(local) {
			if (current) return;
			transition_in(reactwrapper.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(reactwrapper.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(h3);
			if (detaching) detach(t1);
			destroy_component(reactwrapper, detaching);
		}
	};
}

// (67:8) <Row>
function create_default_slot_33(ctx) {
	let col0;
	let t;
	let col1;
	let current;

	col0 = new /*Col*/ ctx[1]({
			props: {
				span: 12,
				$$slots: { default: [create_default_slot_35] },
				$$scope: { ctx }
			}
		});

	col1 = new /*Col*/ ctx[1]({
			props: {
				span: 12,
				$$slots: { default: [create_default_slot_34] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(col0.$$.fragment);
			t = space();
			create_component(col1.$$.fragment);
		},
		m(target, anchor) {
			mount_component(col0, target, anchor);
			insert(target, t, anchor);
			mount_component(col1, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const col0_changes = {};

			if (dirty & /*$$scope*/ 8) {
				col0_changes.$$scope = { dirty, ctx };
			}

			col0.$set(col0_changes);
			const col1_changes = {};

			if (dirty & /*$$scope*/ 8) {
				col1_changes.$$scope = { dirty, ctx };
			}

			col1.$set(col1_changes);
		},
		i(local) {
			if (current) return;
			transition_in(col0.$$.fragment, local);
			transition_in(col1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(col0.$$.fragment, local);
			transition_out(col1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(col0, detaching);
			if (detaching) detach(t);
			destroy_component(col1, detaching);
		}
	};
}

// (89:20) <Title>
function create_default_slot_32(ctx) {
	let t;

	return {
		c() {
			t = text("h1. Ant Design");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (90:20) <Title level={2}>
function create_default_slot_31(ctx) {
	let t;

	return {
		c() {
			t = text("h2. Ant Design");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (91:20) <Title level={3}>
function create_default_slot_30(ctx) {
	let t;

	return {
		c() {
			t = text("h3. Ant Design");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (92:20) <Title level={4}>
function create_default_slot_29(ctx) {
	let t;

	return {
		c() {
			t = text("h4. Ant Design");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (93:20) <Title level={5}>
function create_default_slot_28(ctx) {
	let t;

	return {
		c() {
			t = text("h5. Ant Design");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (86:12) <Col span={12}>
function create_default_slot_27(ctx) {
	let h3;
	let t1;
	let div;
	let title0;
	let t2;
	let title1;
	let t3;
	let title2;
	let t4;
	let title3;
	let t5;
	let title4;
	let current;

	title0 = new /*Title*/ ctx[2]({
			props: {
				$$slots: { default: [create_default_slot_32] },
				$$scope: { ctx }
			}
		});

	title1 = new /*Title*/ ctx[2]({
			props: {
				level: 2,
				$$slots: { default: [create_default_slot_31] },
				$$scope: { ctx }
			}
		});

	title2 = new /*Title*/ ctx[2]({
			props: {
				level: 3,
				$$slots: { default: [create_default_slot_30] },
				$$scope: { ctx }
			}
		});

	title3 = new /*Title*/ ctx[2]({
			props: {
				level: 4,
				$$slots: { default: [create_default_slot_29] },
				$$scope: { ctx }
			}
		});

	title4 = new /*Title*/ ctx[2]({
			props: {
				level: 5,
				$$slots: { default: [create_default_slot_28] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			h3 = element("h3");
			h3.textContent = "Svelte";
			t1 = space();
			div = element("div");
			create_component(title0.$$.fragment);
			t2 = space();
			create_component(title1.$$.fragment);
			t3 = space();
			create_component(title2.$$.fragment);
			t4 = space();
			create_component(title3.$$.fragment);
			t5 = space();
			create_component(title4.$$.fragment);
		},
		m(target, anchor) {
			insert(target, h3, anchor);
			insert(target, t1, anchor);
			insert(target, div, anchor);
			mount_component(title0, div, null);
			append(div, t2);
			mount_component(title1, div, null);
			append(div, t3);
			mount_component(title2, div, null);
			append(div, t4);
			mount_component(title3, div, null);
			append(div, t5);
			mount_component(title4, div, null);
			current = true;
		},
		p(ctx, dirty) {
			const title0_changes = {};

			if (dirty & /*$$scope*/ 8) {
				title0_changes.$$scope = { dirty, ctx };
			}

			title0.$set(title0_changes);
			const title1_changes = {};

			if (dirty & /*$$scope*/ 8) {
				title1_changes.$$scope = { dirty, ctx };
			}

			title1.$set(title1_changes);
			const title2_changes = {};

			if (dirty & /*$$scope*/ 8) {
				title2_changes.$$scope = { dirty, ctx };
			}

			title2.$set(title2_changes);
			const title3_changes = {};

			if (dirty & /*$$scope*/ 8) {
				title3_changes.$$scope = { dirty, ctx };
			}

			title3.$set(title3_changes);
			const title4_changes = {};

			if (dirty & /*$$scope*/ 8) {
				title4_changes.$$scope = { dirty, ctx };
			}

			title4.$set(title4_changes);
		},
		i(local) {
			if (current) return;
			transition_in(title0.$$.fragment, local);
			transition_in(title1.$$.fragment, local);
			transition_in(title2.$$.fragment, local);
			transition_in(title3.$$.fragment, local);
			transition_in(title4.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(title0.$$.fragment, local);
			transition_out(title1.$$.fragment, local);
			transition_out(title2.$$.fragment, local);
			transition_out(title3.$$.fragment, local);
			transition_out(title4.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(h3);
			if (detaching) detach(t1);
			if (detaching) detach(div);
			destroy_component(title0);
			destroy_component(title1);
			destroy_component(title2);
			destroy_component(title3);
			destroy_component(title4);
		}
	};
}

// (96:12) <Col span={12}>
function create_default_slot_26(ctx) {
	let h3;
	let t1;
	let reactwrapper;
	let current;
	reactwrapper = new ReactWrapper({ props: { component: Titles } });

	return {
		c() {
			h3 = element("h3");
			h3.textContent = "React";
			t1 = space();
			create_component(reactwrapper.$$.fragment);
		},
		m(target, anchor) {
			insert(target, h3, anchor);
			insert(target, t1, anchor);
			mount_component(reactwrapper, target, anchor);
			current = true;
		},
		p: noop,
		i(local) {
			if (current) return;
			transition_in(reactwrapper.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(reactwrapper.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(h3);
			if (detaching) detach(t1);
			destroy_component(reactwrapper, detaching);
		}
	};
}

// (85:8) <Row>
function create_default_slot_25(ctx) {
	let col0;
	let t;
	let col1;
	let current;

	col0 = new /*Col*/ ctx[1]({
			props: {
				span: 12,
				$$slots: { default: [create_default_slot_27] },
				$$scope: { ctx }
			}
		});

	col1 = new /*Col*/ ctx[1]({
			props: {
				span: 12,
				$$slots: { default: [create_default_slot_26] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(col0.$$.fragment);
			t = space();
			create_component(col1.$$.fragment);
		},
		m(target, anchor) {
			mount_component(col0, target, anchor);
			insert(target, t, anchor);
			mount_component(col1, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const col0_changes = {};

			if (dirty & /*$$scope*/ 8) {
				col0_changes.$$scope = { dirty, ctx };
			}

			col0.$set(col0_changes);
			const col1_changes = {};

			if (dirty & /*$$scope*/ 8) {
				col1_changes.$$scope = { dirty, ctx };
			}

			col1.$set(col1_changes);
		},
		i(local) {
			if (current) return;
			transition_in(col0.$$.fragment, local);
			transition_in(col1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(col0.$$.fragment, local);
			transition_out(col1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(col0, detaching);
			if (detaching) detach(t);
			destroy_component(col1, detaching);
		}
	};
}

// (107:20) <Title>
function create_default_slot_24(ctx) {
	let t;

	return {
		c() {
			t = text("h1. Ant Design");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (108:20) <Title level={2}>
function create_default_slot_23(ctx) {
	let t;

	return {
		c() {
			t = text("h2. Ant Design");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (109:20) <Title level={3}>
function create_default_slot_22(ctx) {
	let t;

	return {
		c() {
			t = text("h3. Ant Design");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (110:20) <Title level={4}>
function create_default_slot_21(ctx) {
	let t;

	return {
		c() {
			t = text("h4. Ant Design");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (111:20) <Title level={5}>
function create_default_slot_20(ctx) {
	let t;

	return {
		c() {
			t = text("h5. Ant Design");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (104:12) <Col span={12}>
function create_default_slot_19(ctx) {
	let h3;
	let t1;
	let div;
	let title0;
	let t2;
	let title1;
	let t3;
	let title2;
	let t4;
	let title3;
	let t5;
	let title4;
	let current;

	title0 = new /*Title*/ ctx[2]({
			props: {
				$$slots: { default: [create_default_slot_24] },
				$$scope: { ctx }
			}
		});

	title1 = new /*Title*/ ctx[2]({
			props: {
				level: 2,
				$$slots: { default: [create_default_slot_23] },
				$$scope: { ctx }
			}
		});

	title2 = new /*Title*/ ctx[2]({
			props: {
				level: 3,
				$$slots: { default: [create_default_slot_22] },
				$$scope: { ctx }
			}
		});

	title3 = new /*Title*/ ctx[2]({
			props: {
				level: 4,
				$$slots: { default: [create_default_slot_21] },
				$$scope: { ctx }
			}
		});

	title4 = new /*Title*/ ctx[2]({
			props: {
				level: 5,
				$$slots: { default: [create_default_slot_20] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			h3 = element("h3");
			h3.textContent = "Svelte";
			t1 = space();
			div = element("div");
			create_component(title0.$$.fragment);
			t2 = space();
			create_component(title1.$$.fragment);
			t3 = space();
			create_component(title2.$$.fragment);
			t4 = space();
			create_component(title3.$$.fragment);
			t5 = space();
			create_component(title4.$$.fragment);
		},
		m(target, anchor) {
			insert(target, h3, anchor);
			insert(target, t1, anchor);
			insert(target, div, anchor);
			mount_component(title0, div, null);
			append(div, t2);
			mount_component(title1, div, null);
			append(div, t3);
			mount_component(title2, div, null);
			append(div, t4);
			mount_component(title3, div, null);
			append(div, t5);
			mount_component(title4, div, null);
			current = true;
		},
		p(ctx, dirty) {
			const title0_changes = {};

			if (dirty & /*$$scope*/ 8) {
				title0_changes.$$scope = { dirty, ctx };
			}

			title0.$set(title0_changes);
			const title1_changes = {};

			if (dirty & /*$$scope*/ 8) {
				title1_changes.$$scope = { dirty, ctx };
			}

			title1.$set(title1_changes);
			const title2_changes = {};

			if (dirty & /*$$scope*/ 8) {
				title2_changes.$$scope = { dirty, ctx };
			}

			title2.$set(title2_changes);
			const title3_changes = {};

			if (dirty & /*$$scope*/ 8) {
				title3_changes.$$scope = { dirty, ctx };
			}

			title3.$set(title3_changes);
			const title4_changes = {};

			if (dirty & /*$$scope*/ 8) {
				title4_changes.$$scope = { dirty, ctx };
			}

			title4.$set(title4_changes);
		},
		i(local) {
			if (current) return;
			transition_in(title0.$$.fragment, local);
			transition_in(title1.$$.fragment, local);
			transition_in(title2.$$.fragment, local);
			transition_in(title3.$$.fragment, local);
			transition_in(title4.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(title0.$$.fragment, local);
			transition_out(title1.$$.fragment, local);
			transition_out(title2.$$.fragment, local);
			transition_out(title3.$$.fragment, local);
			transition_out(title4.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(h3);
			if (detaching) detach(t1);
			if (detaching) detach(div);
			destroy_component(title0);
			destroy_component(title1);
			destroy_component(title2);
			destroy_component(title3);
			destroy_component(title4);
		}
	};
}

// (114:12) <Col span={12}>
function create_default_slot_18(ctx) {
	let h3;
	let t1;
	let reactwrapper;
	let current;
	reactwrapper = new ReactWrapper({ props: { component: Titles } });

	return {
		c() {
			h3 = element("h3");
			h3.textContent = "React";
			t1 = space();
			create_component(reactwrapper.$$.fragment);
		},
		m(target, anchor) {
			insert(target, h3, anchor);
			insert(target, t1, anchor);
			mount_component(reactwrapper, target, anchor);
			current = true;
		},
		p: noop,
		i(local) {
			if (current) return;
			transition_in(reactwrapper.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(reactwrapper.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(h3);
			if (detaching) detach(t1);
			destroy_component(reactwrapper, detaching);
		}
	};
}

// (103:8) <Row>
function create_default_slot_17(ctx) {
	let col0;
	let t;
	let col1;
	let current;

	col0 = new /*Col*/ ctx[1]({
			props: {
				span: 12,
				$$slots: { default: [create_default_slot_19] },
				$$scope: { ctx }
			}
		});

	col1 = new /*Col*/ ctx[1]({
			props: {
				span: 12,
				$$slots: { default: [create_default_slot_18] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(col0.$$.fragment);
			t = space();
			create_component(col1.$$.fragment);
		},
		m(target, anchor) {
			mount_component(col0, target, anchor);
			insert(target, t, anchor);
			mount_component(col1, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const col0_changes = {};

			if (dirty & /*$$scope*/ 8) {
				col0_changes.$$scope = { dirty, ctx };
			}

			col0.$set(col0_changes);
			const col1_changes = {};

			if (dirty & /*$$scope*/ 8) {
				col1_changes.$$scope = { dirty, ctx };
			}

			col1.$set(col1_changes);
		},
		i(local) {
			if (current) return;
			transition_in(col0.$$.fragment, local);
			transition_in(col1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(col0.$$.fragment, local);
			transition_out(col1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(col0, detaching);
			if (detaching) detach(t);
			destroy_component(col1, detaching);
		}
	};
}

// (125:20) <Title>
function create_default_slot_16(ctx) {
	let t;

	return {
		c() {
			t = text("h1. Ant Design");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (126:20) <Title level={2}>
function create_default_slot_15(ctx) {
	let t;

	return {
		c() {
			t = text("h2. Ant Design");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (127:20) <Title level={3}>
function create_default_slot_14(ctx) {
	let t;

	return {
		c() {
			t = text("h3. Ant Design");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (128:20) <Title level={4}>
function create_default_slot_13(ctx) {
	let t;

	return {
		c() {
			t = text("h4. Ant Design");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (129:20) <Title level={5}>
function create_default_slot_12(ctx) {
	let t;

	return {
		c() {
			t = text("h5. Ant Design");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (122:12) <Col span={12}>
function create_default_slot_11(ctx) {
	let h3;
	let t1;
	let div;
	let title0;
	let t2;
	let title1;
	let t3;
	let title2;
	let t4;
	let title3;
	let t5;
	let title4;
	let current;

	title0 = new /*Title*/ ctx[2]({
			props: {
				$$slots: { default: [create_default_slot_16] },
				$$scope: { ctx }
			}
		});

	title1 = new /*Title*/ ctx[2]({
			props: {
				level: 2,
				$$slots: { default: [create_default_slot_15] },
				$$scope: { ctx }
			}
		});

	title2 = new /*Title*/ ctx[2]({
			props: {
				level: 3,
				$$slots: { default: [create_default_slot_14] },
				$$scope: { ctx }
			}
		});

	title3 = new /*Title*/ ctx[2]({
			props: {
				level: 4,
				$$slots: { default: [create_default_slot_13] },
				$$scope: { ctx }
			}
		});

	title4 = new /*Title*/ ctx[2]({
			props: {
				level: 5,
				$$slots: { default: [create_default_slot_12] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			h3 = element("h3");
			h3.textContent = "Svelte";
			t1 = space();
			div = element("div");
			create_component(title0.$$.fragment);
			t2 = space();
			create_component(title1.$$.fragment);
			t3 = space();
			create_component(title2.$$.fragment);
			t4 = space();
			create_component(title3.$$.fragment);
			t5 = space();
			create_component(title4.$$.fragment);
		},
		m(target, anchor) {
			insert(target, h3, anchor);
			insert(target, t1, anchor);
			insert(target, div, anchor);
			mount_component(title0, div, null);
			append(div, t2);
			mount_component(title1, div, null);
			append(div, t3);
			mount_component(title2, div, null);
			append(div, t4);
			mount_component(title3, div, null);
			append(div, t5);
			mount_component(title4, div, null);
			current = true;
		},
		p(ctx, dirty) {
			const title0_changes = {};

			if (dirty & /*$$scope*/ 8) {
				title0_changes.$$scope = { dirty, ctx };
			}

			title0.$set(title0_changes);
			const title1_changes = {};

			if (dirty & /*$$scope*/ 8) {
				title1_changes.$$scope = { dirty, ctx };
			}

			title1.$set(title1_changes);
			const title2_changes = {};

			if (dirty & /*$$scope*/ 8) {
				title2_changes.$$scope = { dirty, ctx };
			}

			title2.$set(title2_changes);
			const title3_changes = {};

			if (dirty & /*$$scope*/ 8) {
				title3_changes.$$scope = { dirty, ctx };
			}

			title3.$set(title3_changes);
			const title4_changes = {};

			if (dirty & /*$$scope*/ 8) {
				title4_changes.$$scope = { dirty, ctx };
			}

			title4.$set(title4_changes);
		},
		i(local) {
			if (current) return;
			transition_in(title0.$$.fragment, local);
			transition_in(title1.$$.fragment, local);
			transition_in(title2.$$.fragment, local);
			transition_in(title3.$$.fragment, local);
			transition_in(title4.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(title0.$$.fragment, local);
			transition_out(title1.$$.fragment, local);
			transition_out(title2.$$.fragment, local);
			transition_out(title3.$$.fragment, local);
			transition_out(title4.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(h3);
			if (detaching) detach(t1);
			if (detaching) detach(div);
			destroy_component(title0);
			destroy_component(title1);
			destroy_component(title2);
			destroy_component(title3);
			destroy_component(title4);
		}
	};
}

// (132:12) <Col span={12}>
function create_default_slot_10(ctx) {
	let h3;
	let t1;
	let reactwrapper;
	let current;
	reactwrapper = new ReactWrapper({ props: { component: Titles } });

	return {
		c() {
			h3 = element("h3");
			h3.textContent = "React";
			t1 = space();
			create_component(reactwrapper.$$.fragment);
		},
		m(target, anchor) {
			insert(target, h3, anchor);
			insert(target, t1, anchor);
			mount_component(reactwrapper, target, anchor);
			current = true;
		},
		p: noop,
		i(local) {
			if (current) return;
			transition_in(reactwrapper.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(reactwrapper.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(h3);
			if (detaching) detach(t1);
			destroy_component(reactwrapper, detaching);
		}
	};
}

// (121:8) <Row>
function create_default_slot_9(ctx) {
	let col0;
	let t;
	let col1;
	let current;

	col0 = new /*Col*/ ctx[1]({
			props: {
				span: 12,
				$$slots: { default: [create_default_slot_11] },
				$$scope: { ctx }
			}
		});

	col1 = new /*Col*/ ctx[1]({
			props: {
				span: 12,
				$$slots: { default: [create_default_slot_10] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(col0.$$.fragment);
			t = space();
			create_component(col1.$$.fragment);
		},
		m(target, anchor) {
			mount_component(col0, target, anchor);
			insert(target, t, anchor);
			mount_component(col1, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const col0_changes = {};

			if (dirty & /*$$scope*/ 8) {
				col0_changes.$$scope = { dirty, ctx };
			}

			col0.$set(col0_changes);
			const col1_changes = {};

			if (dirty & /*$$scope*/ 8) {
				col1_changes.$$scope = { dirty, ctx };
			}

			col1.$set(col1_changes);
		},
		i(local) {
			if (current) return;
			transition_in(col0.$$.fragment, local);
			transition_in(col1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(col0.$$.fragment, local);
			transition_out(col1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(col0, detaching);
			if (detaching) detach(t);
			destroy_component(col1, detaching);
		}
	};
}

// (143:20) <Title>
function create_default_slot_8(ctx) {
	let t;

	return {
		c() {
			t = text("h1. Ant Design");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (144:20) <Title level={2}>
function create_default_slot_7(ctx) {
	let t;

	return {
		c() {
			t = text("h2. Ant Design");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (145:20) <Title level={3}>
function create_default_slot_6(ctx) {
	let t;

	return {
		c() {
			t = text("h3. Ant Design");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (146:20) <Title level={4}>
function create_default_slot_5(ctx) {
	let t;

	return {
		c() {
			t = text("h4. Ant Design");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (147:20) <Title level={5}>
function create_default_slot_4(ctx) {
	let t;

	return {
		c() {
			t = text("h5. Ant Design");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (140:12) <Col span={12}>
function create_default_slot_3(ctx) {
	let h3;
	let t1;
	let div;
	let title0;
	let t2;
	let title1;
	let t3;
	let title2;
	let t4;
	let title3;
	let t5;
	let title4;
	let current;

	title0 = new /*Title*/ ctx[2]({
			props: {
				$$slots: { default: [create_default_slot_8] },
				$$scope: { ctx }
			}
		});

	title1 = new /*Title*/ ctx[2]({
			props: {
				level: 2,
				$$slots: { default: [create_default_slot_7] },
				$$scope: { ctx }
			}
		});

	title2 = new /*Title*/ ctx[2]({
			props: {
				level: 3,
				$$slots: { default: [create_default_slot_6] },
				$$scope: { ctx }
			}
		});

	title3 = new /*Title*/ ctx[2]({
			props: {
				level: 4,
				$$slots: { default: [create_default_slot_5] },
				$$scope: { ctx }
			}
		});

	title4 = new /*Title*/ ctx[2]({
			props: {
				level: 5,
				$$slots: { default: [create_default_slot_4] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			h3 = element("h3");
			h3.textContent = "Svelte";
			t1 = space();
			div = element("div");
			create_component(title0.$$.fragment);
			t2 = space();
			create_component(title1.$$.fragment);
			t3 = space();
			create_component(title2.$$.fragment);
			t4 = space();
			create_component(title3.$$.fragment);
			t5 = space();
			create_component(title4.$$.fragment);
		},
		m(target, anchor) {
			insert(target, h3, anchor);
			insert(target, t1, anchor);
			insert(target, div, anchor);
			mount_component(title0, div, null);
			append(div, t2);
			mount_component(title1, div, null);
			append(div, t3);
			mount_component(title2, div, null);
			append(div, t4);
			mount_component(title3, div, null);
			append(div, t5);
			mount_component(title4, div, null);
			current = true;
		},
		p(ctx, dirty) {
			const title0_changes = {};

			if (dirty & /*$$scope*/ 8) {
				title0_changes.$$scope = { dirty, ctx };
			}

			title0.$set(title0_changes);
			const title1_changes = {};

			if (dirty & /*$$scope*/ 8) {
				title1_changes.$$scope = { dirty, ctx };
			}

			title1.$set(title1_changes);
			const title2_changes = {};

			if (dirty & /*$$scope*/ 8) {
				title2_changes.$$scope = { dirty, ctx };
			}

			title2.$set(title2_changes);
			const title3_changes = {};

			if (dirty & /*$$scope*/ 8) {
				title3_changes.$$scope = { dirty, ctx };
			}

			title3.$set(title3_changes);
			const title4_changes = {};

			if (dirty & /*$$scope*/ 8) {
				title4_changes.$$scope = { dirty, ctx };
			}

			title4.$set(title4_changes);
		},
		i(local) {
			if (current) return;
			transition_in(title0.$$.fragment, local);
			transition_in(title1.$$.fragment, local);
			transition_in(title2.$$.fragment, local);
			transition_in(title3.$$.fragment, local);
			transition_in(title4.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(title0.$$.fragment, local);
			transition_out(title1.$$.fragment, local);
			transition_out(title2.$$.fragment, local);
			transition_out(title3.$$.fragment, local);
			transition_out(title4.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(h3);
			if (detaching) detach(t1);
			if (detaching) detach(div);
			destroy_component(title0);
			destroy_component(title1);
			destroy_component(title2);
			destroy_component(title3);
			destroy_component(title4);
		}
	};
}

// (150:12) <Col span={12}>
function create_default_slot_2(ctx) {
	let h3;
	let t1;
	let reactwrapper;
	let current;
	reactwrapper = new ReactWrapper({ props: { component: Titles } });

	return {
		c() {
			h3 = element("h3");
			h3.textContent = "React";
			t1 = space();
			create_component(reactwrapper.$$.fragment);
		},
		m(target, anchor) {
			insert(target, h3, anchor);
			insert(target, t1, anchor);
			mount_component(reactwrapper, target, anchor);
			current = true;
		},
		p: noop,
		i(local) {
			if (current) return;
			transition_in(reactwrapper.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(reactwrapper.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(h3);
			if (detaching) detach(t1);
			destroy_component(reactwrapper, detaching);
		}
	};
}

// (139:8) <Row gutter={12}>
function create_default_slot_1(ctx) {
	let col0;
	let t;
	let col1;
	let current;

	col0 = new /*Col*/ ctx[1]({
			props: {
				span: 12,
				$$slots: { default: [create_default_slot_3] },
				$$scope: { ctx }
			}
		});

	col1 = new /*Col*/ ctx[1]({
			props: {
				span: 12,
				$$slots: { default: [create_default_slot_2] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(col0.$$.fragment);
			t = space();
			create_component(col1.$$.fragment);
		},
		m(target, anchor) {
			mount_component(col0, target, anchor);
			insert(target, t, anchor);
			mount_component(col1, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const col0_changes = {};

			if (dirty & /*$$scope*/ 8) {
				col0_changes.$$scope = { dirty, ctx };
			}

			col0.$set(col0_changes);
			const col1_changes = {};

			if (dirty & /*$$scope*/ 8) {
				col1_changes.$$scope = { dirty, ctx };
			}

			col1.$set(col1_changes);
		},
		i(local) {
			if (current) return;
			transition_in(col0.$$.fragment, local);
			transition_in(col1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(col0.$$.fragment, local);
			transition_out(col1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(col0, detaching);
			if (detaching) detach(t);
			destroy_component(col1, detaching);
		}
	};
}

// (8:0) <Row>
function create_default_slot(ctx) {
	let div;
	let h1;
	let t1;
	let p;
	let t3;
	let h20;
	let t5;
	let row0;
	let t6;
	let br0;
	let t7;
	let h21;
	let t9;
	let row1;
	let t10;
	let br1;
	let t11;
	let h22;
	let t13;
	let row2;
	let t14;
	let br2;
	let t15;
	let h23;
	let t17;
	let row3;
	let t18;
	let br3;
	let t19;
	let h24;
	let t21;
	let row4;
	let t22;
	let br4;
	let t23;
	let h25;
	let t25;
	let row5;
	let t26;
	let br5;
	let t27;
	let h26;
	let t29;
	let row6;
	let t30;
	let br6;
	let t31;
	let h27;
	let t33;
	let row7;
	let t34;
	let br7;
	let current;

	row0 = new /*Row*/ ctx[0]({
			props: {
				style: "width: 100%;",
				$$slots: { default: [create_default_slot_57] },
				$$scope: { ctx }
			}
		});

	row1 = new /*Row*/ ctx[0]({
			props: {
				$$slots: { default: [create_default_slot_49] },
				$$scope: { ctx }
			}
		});

	row2 = new /*Row*/ ctx[0]({
			props: {
				$$slots: { default: [create_default_slot_41] },
				$$scope: { ctx }
			}
		});

	row3 = new /*Row*/ ctx[0]({
			props: {
				$$slots: { default: [create_default_slot_33] },
				$$scope: { ctx }
			}
		});

	row4 = new /*Row*/ ctx[0]({
			props: {
				$$slots: { default: [create_default_slot_25] },
				$$scope: { ctx }
			}
		});

	row5 = new /*Row*/ ctx[0]({
			props: {
				$$slots: { default: [create_default_slot_17] },
				$$scope: { ctx }
			}
		});

	row6 = new /*Row*/ ctx[0]({
			props: {
				$$slots: { default: [create_default_slot_9] },
				$$scope: { ctx }
			}
		});

	row7 = new /*Row*/ ctx[0]({
			props: {
				gutter: 12,
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			div = element("div");
			h1 = element("h1");
			h1.textContent = "Typography";
			t1 = space();
			p = element("p");
			p.textContent = "Basic text writing, including headings, body text, lists, and more.";
			t3 = space();
			h20 = element("h2");
			h20.textContent = "Title component";
			t5 = space();
			create_component(row0.$$.fragment);
			t6 = space();
			br0 = element("br");
			t7 = space();
			h21 = element("h2");
			h21.textContent = "Title component";
			t9 = space();
			create_component(row1.$$.fragment);
			t10 = space();
			br1 = element("br");
			t11 = space();
			h22 = element("h2");
			h22.textContent = "Title component";
			t13 = space();
			create_component(row2.$$.fragment);
			t14 = space();
			br2 = element("br");
			t15 = space();
			h23 = element("h2");
			h23.textContent = "Title component";
			t17 = space();
			create_component(row3.$$.fragment);
			t18 = space();
			br3 = element("br");
			t19 = space();
			h24 = element("h2");
			h24.textContent = "Title component";
			t21 = space();
			create_component(row4.$$.fragment);
			t22 = space();
			br4 = element("br");
			t23 = space();
			h25 = element("h2");
			h25.textContent = "Title component";
			t25 = space();
			create_component(row5.$$.fragment);
			t26 = space();
			br5 = element("br");
			t27 = space();
			h26 = element("h2");
			h26.textContent = "Title component";
			t29 = space();
			create_component(row6.$$.fragment);
			t30 = space();
			br6 = element("br");
			t31 = space();
			h27 = element("h2");
			h27.textContent = "Title component";
			t33 = space();
			create_component(row7.$$.fragment);
			t34 = space();
			br7 = element("br");
			set_style(div, "width", "100%");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, h1);
			append(div, t1);
			append(div, p);
			append(div, t3);
			append(div, h20);
			append(div, t5);
			mount_component(row0, div, null);
			append(div, t6);
			append(div, br0);
			append(div, t7);
			append(div, h21);
			append(div, t9);
			mount_component(row1, div, null);
			append(div, t10);
			append(div, br1);
			append(div, t11);
			append(div, h22);
			append(div, t13);
			mount_component(row2, div, null);
			append(div, t14);
			append(div, br2);
			append(div, t15);
			append(div, h23);
			append(div, t17);
			mount_component(row3, div, null);
			append(div, t18);
			append(div, br3);
			append(div, t19);
			append(div, h24);
			append(div, t21);
			mount_component(row4, div, null);
			append(div, t22);
			append(div, br4);
			append(div, t23);
			append(div, h25);
			append(div, t25);
			mount_component(row5, div, null);
			append(div, t26);
			append(div, br5);
			append(div, t27);
			append(div, h26);
			append(div, t29);
			mount_component(row6, div, null);
			append(div, t30);
			append(div, br6);
			append(div, t31);
			append(div, h27);
			append(div, t33);
			mount_component(row7, div, null);
			append(div, t34);
			append(div, br7);
			current = true;
		},
		p(ctx, dirty) {
			const row0_changes = {};

			if (dirty & /*$$scope*/ 8) {
				row0_changes.$$scope = { dirty, ctx };
			}

			row0.$set(row0_changes);
			const row1_changes = {};

			if (dirty & /*$$scope*/ 8) {
				row1_changes.$$scope = { dirty, ctx };
			}

			row1.$set(row1_changes);
			const row2_changes = {};

			if (dirty & /*$$scope*/ 8) {
				row2_changes.$$scope = { dirty, ctx };
			}

			row2.$set(row2_changes);
			const row3_changes = {};

			if (dirty & /*$$scope*/ 8) {
				row3_changes.$$scope = { dirty, ctx };
			}

			row3.$set(row3_changes);
			const row4_changes = {};

			if (dirty & /*$$scope*/ 8) {
				row4_changes.$$scope = { dirty, ctx };
			}

			row4.$set(row4_changes);
			const row5_changes = {};

			if (dirty & /*$$scope*/ 8) {
				row5_changes.$$scope = { dirty, ctx };
			}

			row5.$set(row5_changes);
			const row6_changes = {};

			if (dirty & /*$$scope*/ 8) {
				row6_changes.$$scope = { dirty, ctx };
			}

			row6.$set(row6_changes);
			const row7_changes = {};

			if (dirty & /*$$scope*/ 8) {
				row7_changes.$$scope = { dirty, ctx };
			}

			row7.$set(row7_changes);
		},
		i(local) {
			if (current) return;
			transition_in(row0.$$.fragment, local);
			transition_in(row1.$$.fragment, local);
			transition_in(row2.$$.fragment, local);
			transition_in(row3.$$.fragment, local);
			transition_in(row4.$$.fragment, local);
			transition_in(row5.$$.fragment, local);
			transition_in(row6.$$.fragment, local);
			transition_in(row7.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(row0.$$.fragment, local);
			transition_out(row1.$$.fragment, local);
			transition_out(row2.$$.fragment, local);
			transition_out(row3.$$.fragment, local);
			transition_out(row4.$$.fragment, local);
			transition_out(row5.$$.fragment, local);
			transition_out(row6.$$.fragment, local);
			transition_out(row7.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(row0);
			destroy_component(row1);
			destroy_component(row2);
			destroy_component(row3);
			destroy_component(row4);
			destroy_component(row5);
			destroy_component(row6);
			destroy_component(row7);
		}
	};
}

function create_fragment(ctx) {
	let row;
	let current;

	row = new /*Row*/ ctx[0]({
			props: {
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(row.$$.fragment);
		},
		m(target, anchor) {
			mount_component(row, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const row_changes = {};

			if (dirty & /*$$scope*/ 8) {
				row_changes.$$scope = { dirty, ctx };
			}

			row.$set(row_changes);
		},
		i(local) {
			if (current) return;
			transition_in(row.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(row.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(row, detaching);
		}
	};
}

function instance($$self) {
	const { Row, Col, Title } = AntdSvelte;
	return [Row, Col, Title];
}

class Typography extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Typography;